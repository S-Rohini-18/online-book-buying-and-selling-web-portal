import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import javax.swing.*;

public class BookStoreJDBC extends Frame implements ActionListener {
    private TextField bookTitleField, authorField, priceField;
    private List bookList;
    private Connection connection;

    public BookStoreJDBC() {
        // Database connection
        try {
            connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/bookstore", "root", "root");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database connection failed: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }

        setTitle("Bookstore Portal with Database");
        setSize(600, 500);
        setLayout(new FlowLayout());
        setBackground(Color.LIGHT_GRAY);

        Label headingLabel = new Label("Bookstore Portal");
        headingLabel.setFont(new Font("Arial", Font.BOLD, 24));
        add(headingLabel);

        // Selling Section
        Label sellingLabel = new Label("Selling Section");
        sellingLabel.setFont(new Font("Arial", Font.BOLD, 18));
        add(sellingLabel);

        Label titleLabel = new Label("Book Title:");
        bookTitleField = new TextField(30);
        add(titleLabel);
        add(bookTitleField);

        Label authorLabel = new Label("Author:");
        authorField = new TextField(30);
        add(authorLabel);
        add(authorField);

        Label priceLabel = new Label("Price:");
        priceField = new TextField(10);
        add(priceLabel);
        add(priceField);

        Button addBookButton = new Button("Add Book");
        addBookButton.addActionListener(this);
        add(addBookButton);

        // Buying Section
        Label buyingLabel = new Label("Buying Section");
        buyingLabel.setFont(new Font("Arial", Font.BOLD, 18));
        add(buyingLabel);

        bookList = new List(10, false);
        add(bookList);

        Button loadBooksButton = new Button("Load Books");
        loadBooksButton.addActionListener(this);
        Button buyBookButton = new Button("Buy Selected Book");
        buyBookButton.addActionListener(this);

        add(loadBooksButton);
        add(buyBookButton);

        // Window close handler
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent we) {
                try {
                    if (connection != null) connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                System.exit(0);
            }
        });

        setVisible(true);
    }

    public void actionPerformed(ActionEvent e) {
        String action = e.getActionCommand();

        if (action.equals("Add Book")) {
            addBook();
        } else if (action.equals("Load Books")) {
            loadBooks();
        } else if (action.equals("Buy Selected Book")) {
            buyBook();
        }
    }

    private void addBook() {
        String title = bookTitleField.getText();
        String author = authorField.getText();
        String priceText = priceField.getText();

        if (title.isEmpty() || author.isEmpty() || priceText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields must be filled!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            double price = Double.parseDouble(priceText);
            String query = "INSERT INTO book (bookname, author, price) VALUES (?, ?, ?)";
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setString(1, title);
            stmt.setString(2, author);
            stmt.setDouble(3, price);

            stmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Book added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Clear input fields and refresh list
            bookTitleField.setText("");
            authorField.setText("");
            priceField.setText("");
            loadBooks();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid price format!", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadBooks() {
        bookList.removeAll();
        String query = "SELECT id, bookname, author, price FROM book";

        try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                int id = rs.getInt("id");
                String title = rs.getString("bookname");
                String author = rs.getString("author");
                double price = rs.getDouble("price");
                bookList.add(id + ": " + title + " by " + author + " - $" + price);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading books: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void buyBook() {
        int selectedIndex = bookList.getSelectedIndex();
        if (selectedIndex >= 0) {
            String selectedBook = bookList.getSelectedItem();
            int bookId = Integer.parseInt(selectedBook.split(":")[0]); // Extract book ID

            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to buy this book?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                String query = "DELETE FROM book  WHERE id = ?";
                try (PreparedStatement stmt = connection.prepareStatement(query)) {
                    stmt.setInt(1, bookId);
                    stmt.executeUpdate();
                    JOptionPane.showMessageDialog(this, "You bought this book!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    loadBooks();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error buying book: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "No book selected!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void main(String[] args) {
        new BookStoreJDBC();
    }
}
